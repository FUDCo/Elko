package org.elkoserver.util.trace;

import java.util.Formatter;

/** 
 * Base object representing a trace message generated by a call to one of the
 * {@link Trace} class's trace methods.
 */
public class TraceMessage {
    /** The subsystem is the larger body of code the message applies to. */
    private final String mySubsystem;

    /** The time and date at which the message was output. */
    private long myTimestamp;

    /**
     * The level (<tt>ERROR</tt>, <tt>DEBUG</tt>, etc.) at which the message
     * was output.  This is distinct from the priority threshold that
     * determines <i>whether</i> the message should be output.  (The latter is
     * controlled by the {@link Trace} object).
     */
    private final int myLevel;

    /**
     * Start a new TraceMessage.
     *
     * @param subsystem  The subsystem which generated the message
     * @Param level  The trace level applicable to the message
     */
    TraceMessage(String subsystem, int level) {
        myTimestamp = System.currentTimeMillis();
        mySubsystem = subsystem;
        myLevel = level;
    }

    /**
     * Get the timestamp on this message.
     *
     * @return the timestamp on this message.
     */
    long timestamp() {
        return myTimestamp;
    }

    /**
     * Convert this message into a string.
     */
    public String toString() {
        StringBuilder buffer = new StringBuilder(200);
        stringify(buffer);
        return buffer.toString();
    }

    /** 
     * Convert this message into a string using an externally provided buffer.
     *
     * @param buffer  String builder into which to generate the string.
     */
    void stringify(StringBuilder buffer) {
        buffer.setLength(0);
        Formatter formatter = new Formatter(buffer);
        formatter.format("- %1$tY/%1$tm/%1$td %1$tT.%1$tL ", myTimestamp);

        buffer.append(TraceLevelTranslator.terse(myLevel));
        buffer.append(' ');

        buffer.append(mySubsystem);
    }
}
